import os
import logging
import requests

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

from keyboards import keyboard


load_dotenv()

TOKEN = os.getenv('TOKEN')
CHAT_TOKEN = os.getenv('CHAT_ID')
OPEN_WEATHER_TOKEN = os.getenv('OPEN_WEATHER_TOKEN')
EXCHANGE_RATES_TOKEN = os.getenv('EXCHANGE_RATES_TOKEN')


logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class Form(StatesGroup):
    number = State()


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    """ –ü—Ä–∏–≤–µ—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    await message.answer(
        text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–º–æ–≥—É —á–µ–º —Å–º–æ–≥—É...',
        reply_markup=keyboard,
        parse_mode='HTML',
    )


@dp.message_handler(lambda message: message.text == '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É')
async def get_exchange(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –≤–∞–ª—é—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.
    –û–∂–∏–¥–∞–µ—Ç –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤–µ–¥–µ—Ç –¥–∞–Ω–Ω—ã–µ.
    """
    await message.answer(
        text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –≤–∞–ª—é—Ç—ã –∏–∑ –∫–∞–∫–æ–π –≤ –∫–∞–∫—É—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n'
             '–ü—Ä–∏–º–µ—Ä: 10 USD RUB',
    )
    await message.delete()
    await Form.number.set()


@dp.message_handler(state=Form.number)
async def exchange(message: types.Message):
    """ –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç—ã."""
    try:
        amount, from_s, to_s = message.text.split()
        amount = int(amount)
        from_s = from_s.upper()
        to_s = to_s.upper()
        url = f'https://api.apilayer.com/exchangerates_data/convert?to={to_s}&from={from_s}&amount={amount}'
        payload = {}
        headers= {
          "apikey": EXCHANGE_RATES_TOKEN
        }
        response = requests.request("GET", url, headers=headers, data = payload).json()
        result = round(response.get('result'), 2)
        await message.answer(text=f'{amount} {from_s} = {result} {to_s} ')
    except ValueError:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö')
    except TypeError:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∞–ª—é—Ç—ã')


@dp.message_handler(lambda message: message.text == '–ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏–∫–∞ üêà')
async def get_cat(message: types.Message):
    """ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Ñ–æ—Ç–æ –∫–æ—Ç–∞."""
    response = requests.get(url='https://api.thecatapi.com/v1/images/search').json()
    random_cat = response[0].get('url')
    await message.delete()
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=random_cat,
    )


@dp.message_handler(lambda message: message.text == '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ —É–ª–∏—Ü–µ')
async def get_weather(message: types.Message):
    """ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ IP-–∞–¥—Ä–µ—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    address = 'https://ipinfo.io/json'
    response = requests.get(url=address).json()
    lat, lon = response['loc'].split(',')
    params = {
        'lat': lat,
        'lon': lon,
        'appid': OPEN_WEATHER_TOKEN,
        'units': 'metric',
    }
    address = 'https://api.openweathermap.org/data/2.5/weather?'
    response = requests.get(url=address, params=params).json()
    response = response.get('main')
    temp = round(response['temp'])
    await message.delete()
    await message.answer(text=f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ —É–ª–∏—Ü–µ {temp} ‚ÑÉ')


@dp.message_handler(lambda message: message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π IP')
async def get_ip_address(message: types.Message):
    """ –§—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ IP-–∞–¥—Ä–µ—Å–∞"""
    address = 'https://ipinfo.io/json'
    response = requests.get(url=address).json()
    ip_address = response['ip']
    await message.delete()
    await message.answer(text=f'–í–∞—à ip-–∞–¥—Ä–µ—Å - {ip_address}')


if __name__ == '__main__':
    executor.start_polling(
        dp,
        skip_updates=True,  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
    )
